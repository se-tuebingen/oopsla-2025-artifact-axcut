(import lit_1 () (ext Int))
(import lit_0 () (ext Int))
(import lit_-1 () (ext Int))
(import ifz (ext Int) () ())
(import ifl (ext Int ext Int) () ())
(import add (ext Int ext Int) (ext Int))
(import return (ext Int))

(signature List () (ext Int pro List))
(signature Cont (ext Int))


(define main (n) (ext Int)
  (do (i) extern lit_0 ())
  (let u List 0 ())
  (new k Cont () ((z) (extern return (z))))
  (do (i n u k) substitute (i n u k))
  (jump useless)
)

(define useless (i n b a0) (ext Int ext Int pro List con Cont)
  (extern ifl (i n)
    (()
      (do (n i a0) substitute (n i a0))
      (do (x0) extern lit_1 ())
      (do (x0 n i a0) substitute (x0 n i a0))
      (do (j) extern add (i x0))
      (do (j n a0 i) substitute (j n a0 i))
      (new a1 List (j n a0)
        (()
          (do (j n a0) substitute (j n a0))
          (let x2 List 0 ())
          (do (j n x2 a0) substitute (j n x2 a0))
          (jump useless))
        ((x xs)
          (do (x xs a0 j n) substitute (x xs a0 j n))
          (let x2 List 1 (x xs))
          (do (j n x2 a0) substitute (j n x2 a0))
          (jump useless)))
      (do (a1 i) substitute (a1 i))
      (do (x2) extern lit_0 ())
      (do (x2 a1 i) substitute (x2 a1 i))
      (let x3 List 0 ())
      (do (x2 i x3 a1) substitute (x2 i x3 a1))
      (jump replicate))
  (()
    (do (a0 i) substitute (a0 i))
    (invoke a0 0)))
)

(define replicate (v n a a0) (ext Int ext Int pro List con List)
  (extern ifz (n)
    (()
      (do (a a0) substitute (a a0))
      (switch a
        (()
          (do (a0) substitute (a0))
          (invoke a0 0))
        ((x xs)
          (do (a0 x xs) substitute (a0 x xs))
          (invoke a0 1))))
    (()
      (do (v n a a0) substitute (v n a a0))
      (do (x0) extern lit_-1 ())
      (do (x0 v n a a0) substitute (x0 v n a a0))
      (do (m) extern add (n x0))
      (do (w a m v a0) substitute (v a m v a0))
      (let x2 List 1 (w a))
      (do (v m x2 a0) substitute (v m x2 a0))
      (jump replicate)))
)

(import lit_0 () (ext Int))
(import lit_1 () (ext Int))
(import ifl (ext Int ext Int) () ())
(import add (ext Int ext Int) (ext Int))
(import return (ext Int))

(signature Tree (ext Int) (pro Tree pro Tree))
(signature Cont (ext Int))


(define main (n) (ext Int)
  (do (i) extern lit_0 ())
  (new k0 Cont () ((r) (extern return (r))))
  (new k Tree (k0)
    ((v)
      (do (v k0) substitute (v k0))
      (let t Tree 0 (v))
      (do (t k0) substitute (t k0))
      (jump lookup))
    ((l r)
      (do (l r k0) substitute (l r k0))
      (let t Tree 1 (l r))
      (do (t k0) substitute (t k0))
      (jump lookup)))
  (do (i n k) substitute (i n k))
  (jump create)
)

(define create (i n a0) (ext Int ext Int con Tree)
  (extern ifl (i n)
    (()
      (do (i n a0) substitute (i n a0))
      (do (x0) extern lit_1 ())
      (do (x0 i n a0) substitute (x0 i n a0))
      (do (j) extern add (i x0))
      (do (a0 n j) substitute (a0 n j))
      (new a1 Tree (a0)
        ((v)
          (do (v a0) substitute (v a0))
          (let t Tree 0 (v))
          (do (a0 t u) substitute (a0 t t))
          (invoke a0 1))
        ((l r)
          (do (l r a0) substitute (l r a0))
          (let t Tree 1 (l r))
          (do (a0 t u) substitute (a0 t t))
          (invoke a0 1)))
      (do (j n a1) substitute (j n a1))
      (jump create))
    (()
      (do (a0 n) substitute (a0 n))
      (invoke a0 0)))
)

(define lookup (t a0) (pro Tree con Cont)
  (do (t a0) substitute (t a0))
  (switch t
    ((v)
      (do (a0 v) substitute (a0 v))
      (invoke a0 0))
    ((l r)
      (do (t a0) substitute (l a0))
      (jump lookup)))
)

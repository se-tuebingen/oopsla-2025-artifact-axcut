(import mul (ext Int ext Int) (ext Int))
(import lit_0 () (ext Int))
(import lit_1 () (ext Int))
(import lit_2 () (ext Int))
(import lit_3 () (ext Int))
(import ifz (ext Int) () ())
(import return (ext Int))

(signature List () (ext Int pro List))
(signature Cont (ext Int))

(define main () ()
  (new k Cont () ((z) (extern return (z))))
  (let e List 0 ())
  (do (x1) extern lit_2 ())
  (let l1 List 1 (x1 e))
  (do (x2) extern lit_0 ())
  (let l2 List 1 (x2 l1))
  (do (x3) extern lit_3 ())
  (let l3 List 1 (x3 l2))
  (do (x4) extern lit_3 ())
  (let l4 List 1 (x4 l3))
  (jump fmult)
)

(define fmult (l k) (pro List con Cont)
  (do (l k1 k2) substitute (l k k))
  (jump mult)
)

(define mult (l h k) (pro List con Cont con Cont)
  (do (l h k) substitute (l h k))
  (switch l
    (()
      (do (k) substitute (k))
      (do (r) extern lit_1 ())
      (do (k r) substitute (k r))
      (invoke k 0))
    ((x xs)
      (extern ifz (x)
        (()
          (do (h) substitute (h))
          (do (r) extern lit_0 ())
          (do (h r) substitute (h r))
          (invoke h 0))
        (()
          (do (x k xs h) substitute (x k xs h))
          (new k1 Cont (x k) ((p)
            (do (x k p) substitute (x k p))
            (do (r) extern mul (x p))
            (do (k r) substitute (k r))
            (invoke k 0)))
          (do (xs h k) substitute (xs h k1))
          (jump mult)))))
)
